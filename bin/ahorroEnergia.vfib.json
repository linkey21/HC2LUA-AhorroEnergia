{"name":"ahorroEnergia","type":"virtual_device","properties":{"deviceIcon":276,"currentIcon":"276","log":"","logTemp":"","mainLoop":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tmainLoop.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\nlocal iconId = 276\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[resetDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a almacenar en la variable global\n  crea una varaible global para almacenar la tabla que representa el dispositivo\n  y lo inicializa. --]]\nfunction resetDevice(nodeId)\n  -- si no exite la variable global\n  if not isVariable('dev'..nodeId) then\n    -- intentar crear la variableGlobal\n    local json = '{\"name\":\"'..'dev'..nodeId..'\", \"isEnum\":0}'\n    if not HC2 then HC2 = Net.FHttp(\"127.0.0.1\", 11111) end\n    HC2:POST(\"/api/globalVariables\", json)\n    fibaro:sleep(1000)\n    -- comprobar que se ha creado la variableGlobal\n    if not isVariable('dev'..nodeId) then\n      fibaro:debug('No se pudo declarar variable global dev'..nodeId)\n      fibaro:abort()\n    end\n  end\n  -- crear tabla vac√≠a para dispositivos\n  local staleTimeoOut = 0\n  local powerSavingDevs = {}\n  --powerSavingDevs[#powerSavingDevs + 1] = {switchON = false, name = \"üîß\",\n  -- id = 0, selected = false, pwOffPre = 0, NO = true}\n  local ahorroEnergia = {powerSavingDevs = powerSavingDevs,\n   staleTimeoOut = staleTimeoOut}\n\n  -- guardar la tabla en la variable global\n  fibaro:setGlobal('dev'..nodeId, json.encode(ahorroEnergia))\n  return ahorroEnergia\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso iniciarlo y devolverlo\n  return resetDevice(nodeId)\nend\n\n-- recuperar dispositivo\nlocal powerSavingDevs = getDevice(_selfId)\npowerSavingDevs = powerSavingDevs.powerSavingDevs\n\n\nwhile true do\n  -- actualizar etiqueta id de dispositivo\n  fibaro:call(_selfId,\"setProperty\",\"ui.idLabel.value\", 'id: '.._selfId)\n  -- actualizar icono\n  fibaro:call(_selfId, 'setProperty', \"currentIcon\", iconId)\n  -- watchdog\n  fibaro:debug('ahorroEnergia OK')\n  fibaro:sleep(1000)\nend\n","ui.devicesLabel.value":"146-Tel√©fono Supletorio","ui.idLabel.value":"id: 265","ui.optionsLabel.value":"pwS=0W  swT=NO  wUp=OFF ","ui.selectedDevices.value":"113-Luz Sal√≥n","ui.staleTimeoOutButton.value":"01:30","visible":"true","rows":[{"type":"label","elements":[{"id":1,"lua":false,"waitForResponse":false,"caption":"","name":"devicesLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":2,"lua":true,"waitForResponse":false,"caption":"Select  üëâ","name":"seelctButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tdeviceButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal powerSavingDevs = getDevice(_selfId)\npowerSavingDevs = powerSavingDevs.powerSavingDevs\n\n-- obtener conexi√≥n con el controlador\nif not HC2 then\n  HC2 = Net.FHttp(\"127.0.0.1\", 11111)\nend\n\n-- obtener sensores interruptores\nresponse ,status, errorCode = HC2:GET(\"/api/devices?roomID=\"..\n fibaro:getRoomID(_selfId))\nlocal devices = json.decode(response)\nlocal binarySwitches = {}\nfor key, value in pairs(devices) do\n  for actionsKey, actionsValue in pairs(value['actions']) do\n    if actionsKey == 'turnOn' and not inTable(powerSavingDevs, value) then\n      local binarySwitch = {id = value.id, name = value.name}\n      table.insert(binarySwitches, binarySwitch)\n      break\n    end\n  end\nend\n\n-- averiguar dispositivo seleccioando actualmete\nlocal selectedId = 1\nlocal label = fibaro:get(_selfId,\"ui.devicesLabel.value\")\nfor key, value in pairs(binarySwitches) do\n  if value.id..'-'..value.name == label then selectedId = key end\nend\n-- seleccionar el siguiente dispositivo\nif selectedId < #binarySwitches then\n  selectedId = selectedId + 1\nelseif #binarySwitches == 0 then\n  selectedId = 0\nelse\n  selectedId = 1\nend\n\n-- anotar las etiquetas\nif selectedId ~= 0 then\n  fibaro:call(_selfId,\"setProperty\",\"ui.devicesLabel.value\",\n  binarySwitches[selectedId].id..'-'..binarySwitches[selectedId].name)\nelse\n  fibaro:call(_selfId,\"setProperty\",\"ui.devicesLabel.value\", '-')\nend\n\n--  üí° üëâÔ∏è\n","buttonIcon":0,"favourite":false,"main":true},{"id":3,"lua":true,"waitForResponse":false,"caption":"Add ‚ôªÔ∏è","name":"addButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\taddButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- escoger dispositivo seleccioando actualmete\nlocal label = fibaro:get(_selfId,\"ui.devicesLabel.value\")\nlocal p2 = string.find(label, '-')\nlocal id = tonumber(string.sub(label, 1, p2 - 1))\nlocal name = string.sub(label, p2 + 1, #label)\nfibaro:debug(id..'-'..name)\n\n-- invocar al bot√≥n para seleccionar el siguiente dispositivo\nfibaro:call(_selfId, 'pressButton', '2')\n\n-- recuperar dispositivo\nlocal ahorroEnergia = getDevice(_selfId)\n\n-- a√±adir dispositivo seleccionado\nlocal powerSavingDev = {switchON = false, name = name, id = id,\n selected = false, pwSafe = 0, NO = true}\ntable.insert(ahorroEnergia.powerSavingDevs, powerSavingDev)\n\n-- guardar la tabla en la variable global\nfibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\n-- actualizar etiqueta de dispositivos seleccionados\nfibaro:call(_selfId, \"setProperty\", \"ui.selectedDevices.value\",\n  powerSavingDev.id..'-'..powerSavingDev.name)\n-- actualizar etiqueta de propiedades\nfibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n 'pwS=0W  swT=NO  wUp=OFF ')\n--  üí°‚ôªÔ∏è\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":4,"lua":false,"waitForResponse":false,"caption":"","name":"selectedDevices","favourite":false,"main":false}]},{"type":"button","elements":[{"id":5,"lua":true,"waitForResponse":false,"caption":"Select üëâ","name":"selectedButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tselecDevButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal powerSavingDevs = getDevice(_selfId)\npowerSavingDevs = powerSavingDevs.powerSavingDevs\n\n-- averiguar dispositivo seleccioando actualmete\nlocal selectedId = 1\nlocal label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\nfor key, value in pairs(powerSavingDevs) do\n  if value.id..'-'..value.name == label then selectedId = key end\nend\n-- seleccionar el siguiente dispositivo\nif selectedId < #powerSavingDevs then\n  selectedId = selectedId + 1\nelseif #powerSavingDevs == 0 then\n  selectedId = 0\nelse\n  selectedId = 1\nend\n\n-- anotar las etiquetas\nif selectedId ~= 0 then\n  fibaro:call(_selfId,\"setProperty\",\"ui.selectedDevices.value\",\n  powerSavingDevs[selectedId].id..'-'..powerSavingDevs[selectedId].name)\n  local type = 'NC'\n  if powerSavingDevs[selectedId].NO then type = 'NO' end\n  local switchON = 'OFF'\n  if powerSavingDevs[selectedId].switchON then switchON = 'ON' end\n  fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n   'pwS='..powerSavingDevs[selectedId].pwSafe..'W  swT='..\n   type..'  wUp='..switchON)\nelse\n  fibaro:call(_selfId,\"setProperty\",\"ui.selectedDevices.value\", '-')\n  fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n   'pwS=  swT=  wUp= ')\nend\n\n--  üí°‚ôªÔ∏è\n","buttonIcon":0,"favourite":false,"main":false},{"id":6,"lua":true,"waitForResponse":false,"caption":"Delete  ‚ùå","name":"delButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tselecDevButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal ahorroEnergia = getDevice(_selfId)\npowerSavingDevs = ahorroEnergia.powerSavingDevs\n\n-- averiguar dispositivo seleccioando actualmete\nlocal device = nil\nlocal label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\nfor key, value in pairs(powerSavingDevs) do\n  if value.id..'-'..value.name == label then\n    -- borrar el dispositivo de la tabla\n    device = table.remove(powerSavingDevs, key)\n    -- escoger el siguiente dispositivo\n    if #powerSavingDevs == 0 then -- si no quedan elementos\n      device = nil\n    elseif #powerSavingDevs < key then -- si se ha borrado el √∫ltimo lugar\n      -- devolver el elemente que ocupa el ultimo lugar ahora\n      device = powerSavingDevs[#powerSavingDevs]\n    else -- en otro caso devolver el actual\n      device = powerSavingDevs[key]\n    end\n    -- guardar la tabla en la variable global\n    ahorroEnergia.powerSavingDevs = powerSavingDevs\n    fibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n    break -- salir de bucle\n  end\nend\n\n-- anotar las etiquetas\nif device then\n  fibaro:call(_selfId,\"setProperty\",\"ui.selectedDevices.value\",\n   device.id..'-'..device.name)\n   local type = 'NC'\n   if device.NO then type = 'NO' end\n   local switchON = 'OFF'\n   if device.switchON then switchON = 'ON' end\n   fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n    'pwS='..device.pwSafe..'W  swT='..type..'  wUp='..switchON)\nelse\n  fibaro:call(_selfId,\"setProperty\",\"ui.selectedDevices.value\", '-')\n  fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n   'pwS=  swT=  wUp= ')\nend\n\n--  üí°‚ôªÔ∏è\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":7,"lua":false,"waitForResponse":false,"caption":"","name":"optionsLabel","favourite":false,"main":false}]},{"type":"button","elements":[{"id":8,"lua":true,"waitForResponse":false,"caption":"-W","name":"pwSDownButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tpwSDownButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivos\nlocal ahorroEnergia = getDevice(_selfId)\npowerSavingDevs = ahorroEnergia.powerSavingDevs\nfibaro:debug(json.encode(powerSavingDevs))\n-- si hay dispositivos seleccionados\nif #powerSavingDevs > 0 then\n  -- averiguar dispositivo seleccioando actualmete\n  local selectedId = 0\n  local label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\n  for key, value in pairs(powerSavingDevs) do\n    if value.id..'-'..value.name == label then selectedId = key end\n  end\n  fibaro:debug(json.encode(powerSavingDevs[selectedId]))\n  -- si encuantra el dispositivo\n  if selectedId ~= 0 then\n    -- si el valor de potencia de seguridad es mayor o igual que la potencia de\n    -- seguridad m√≠nima\n    if powerSavingDevs[selectedId].pwSafe >= 10 then\n      -- disminuir la potencia de seguridad\n      powerSavingDevs[selectedId].pwSafe =\n       powerSavingDevs[selectedId].pwSafe - 10\n    else\n      -- pasar la la potencia de seguridad m√°xima\n      powerSavingDevs[selectedId].pwSafe = 500\n    end\n    -- guardar la tabla en la variable global\n    ahorroEnergia.powerSavingDevs = powerSavingDevs\n    fibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\n    -- actualizar etiqueta de propiedades\n    local type = 'NC'\n    if powerSavingDevs[selectedId].NO then type = 'NO' end\n    local switchON = 'OFF'\n    if powerSavingDevs[selectedId].switchON then switchON = 'ON' end\n    fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n     'pwS='..powerSavingDevs[selectedId].pwSafe..'W '..\n     'swT='..type..' wUp='..switchON)\n  end\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":9,"lua":true,"waitForResponse":false,"caption":"+W","name":"Button32","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tpwSUpButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivos\nlocal ahorroEnergia = getDevice(_selfId)\npowerSavingDevs = ahorroEnergia.powerSavingDevs\nfibaro:debug(json.encode(powerSavingDevs))\n-- si hay dispositivos seleccionados\nif #powerSavingDevs > 0 then\n  -- averiguar dispositivo seleccioando actualmete\n  local selectedId = 0\n  local label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\n  for key, value in pairs(powerSavingDevs) do\n    if value.id..'-'..value.name == label then selectedId = key end\n  end\n  fibaro:debug(json.encode(powerSavingDevs[selectedId]))\n  -- si encuantra el dispositivo\n  if selectedId ~= 0 then\n    -- si el valor de potencia de seguridad es mayor o igual que la potencia de\n    -- seguridad m√≠nima\n    if powerSavingDevs[selectedId].pwSafe < 500 then\n      -- disminuir la potencia de seguridad\n      powerSavingDevs[selectedId].pwSafe =\n       powerSavingDevs[selectedId].pwSafe + 10\n    else\n      -- pasar la la potencia de seguridad m√°xima\n      powerSavingDevs[selectedId].pwSafe = 0\n    end\n    -- guardar la tabla en la variable global\n    ahorroEnergia.powerSavingDevs = powerSavingDevs\n    fibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\n    -- actualizar etiqueta de propiedades\n    local type = 'NC'\n    if powerSavingDevs[selectedId].NO then type = 'NO' end\n    local switchON = 'OFF'\n    if powerSavingDevs[selectedId].switchON then switchON = 'ON' end\n    fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n     'pwS='..powerSavingDevs[selectedId].pwSafe..'W '..\n     'swT='..type..' wUp='..switchON)\n  end\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":10,"lua":true,"waitForResponse":false,"caption":"Nc/No","name":"ncNoButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tncNoButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivos\nlocal ahorroEnergia = getDevice(_selfId)\npowerSavingDevs = ahorroEnergia.powerSavingDevs\nfibaro:debug(json.encode(powerSavingDevs))\n-- si hay dispositivos seleccionados\nif #powerSavingDevs > 0 then\n  -- averiguar dispositivo seleccioando actualmete\n  local selectedId = 0\n  local label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\n  for key, value in pairs(powerSavingDevs) do\n    if value.id..'-'..value.name == label then selectedId = key end\n  end\n  fibaro:debug(json.encode(powerSavingDevs[selectedId]))\n  -- si encuantra el dispositivo\n  if selectedId ~= 0 then\n    -- cambiar el valor NormallyOpen/NormallyClose\n    if powerSavingDevs[selectedId].NO then\n      -- cambiar a NormallyClose\n      powerSavingDevs[selectedId].NO = false\n    else\n      -- cambia a NormallyOpen\n      powerSavingDevs[selectedId].NO = true\n    end\n    -- guardar la tabla en la variable global\n    ahorroEnergia.powerSavingDevs = powerSavingDevs\n    fibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\n    -- actualizar etiqueta de propiedades\n    local type = 'NC'\n    if powerSavingDevs[selectedId].NO then type = 'NO' end\n    local switchON = 'OFF'\n    if powerSavingDevs[selectedId].switchON then switchON = 'ON' end\n    fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n     'pwS='..powerSavingDevs[selectedId].pwSafe..'W '..\n     'swT='..type..' wUp='..switchON)\n  end\nend\n","buttonIcon":0,"favourite":false,"main":false},{"id":11,"lua":true,"waitForResponse":false,"caption":"On/Off","name":"switchONButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tswitchONButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivos\nlocal ahorroEnergia = getDevice(_selfId)\npowerSavingDevs = ahorroEnergia.powerSavingDevs\nfibaro:debug(json.encode(powerSavingDevs))\n-- si hay dispositivos seleccionados\nif #powerSavingDevs > 0 then\n  -- averiguar dispositivo seleccioando actualmete\n  local selectedId = 0\n  local label = fibaro:get(_selfId,\"ui.selectedDevices.value\")\n  for key, value in pairs(powerSavingDevs) do\n    if value.id..'-'..value.name == label then selectedId = key end\n  end\n  fibaro:debug(json.encode(powerSavingDevs[selectedId]))\n  -- si encuantra el dispositivo\n  if selectedId ~= 0 then\n    -- cambiar el valor NormallyOpen/NormallyClose\n    if powerSavingDevs[selectedId].switchON then\n      -- cambiar a NormallyClose\n      powerSavingDevs[selectedId].switchON = false\n    else\n      -- cambia a NormallyOpen\n      powerSavingDevs[selectedId].switchON = true\n    end\n    -- guardar la tabla en la variable global\n    ahorroEnergia.powerSavingDevs = powerSavingDevs\n    fibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\n    -- actualizar etiqueta de propiedades\n    local type = 'NC'\n    if powerSavingDevs[selectedId].NO then type = 'NO' end\n    local switchON = 'OFF'\n    if powerSavingDevs[selectedId].switchON then switchON = 'ON' end\n    fibaro:call(_selfId, \"setProperty\", \"ui.optionsLabel.value\",\n     'pwS='..powerSavingDevs[selectedId].pwSafe..'W '..\n     'swT='..type..' wUp='..switchON)\n  end\nend\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":12,"lua":false,"waitForResponse":false,"caption":"","name":"staleTimeoOutButton","favourite":false,"main":false}]},{"type":"button","elements":[{"id":13,"lua":false,"waitForResponse":false,"caption":"","name":"button_7_0","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":14,"lua":false,"waitForResponse":false,"caption":"","name":"button_7_0","empty":true,"msg":"","buttonIcon":0,"favourite":false,"main":false},{"id":15,"lua":true,"waitForResponse":false,"caption":"- ‚è±","name":"downTimeButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tdownTimeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\ninterval = 15 -- min.\nmaxTime = 12 -- h.\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal ahorroEnergia = getDevice(_selfId)\nlocal staleTimeoOut = ahorroEnergia.staleTimeoOut\n\n-- disminuir el tiempo\nif staleTimeoOut >= interval * 60 then\n  -- disminuir intervalo\n  staleTimeoOut = staleTimeoOut - (interval * 60)\nelse\n  -- situar el tiempo m√°ximo\n  staleTimeoOut = maxTime * 60 * 60\nend\n\n-- guardar la tabla en la variable global\nahorroEnergia.staleTimeoOut = staleTimeoOut\nfibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\nlocal formatTime = os.date(\"*t\", os.time())\nformatTime.hour = 0; formatTime.sec = 0; formatTime.min = 0\nformatTime = os.time(formatTime)\nformatTime = formatTime + staleTimeoOut\nfibaro:debug(formatTime)\nformatTime = os.date('%H:%M', formatTime)\n-- actualizar etiqueta de propiedades\nfibaro:call(_selfId, \"setProperty\", \"ui.staleTimeoOutButton.value\", formatTime)\n","buttonIcon":0,"favourite":false,"main":false},{"id":16,"lua":true,"waitForResponse":false,"caption":"+ ‚è±","name":"upTimeButton","empty":false,"msg":"--[[ ahorroEnergia\n\tDispositivo virtual\n\tdownTimeButton.lua\n\tpor Manuel Pascual\n------------------------------------------------------------------------------]]\n\n--[[----- CONFIGURACION DE USUARIO -------------------------------------------]]\ninterval = 15 -- min.\nmaxTime = 12 -- h.\n--[[----- FIN CONFIGURACION DE USUARIO ---------------------------------------]]\n\n--[[----- NO CAMBIAR EL CODIGO A PARTIR DE AQUI ------------------------------]]\n\n--[[----- CONFIGURACION AVANZADA ---------------------------------------------]]\nlocal _selfId = fibaro:getSelfId()  -- ID de este dispositivo virtual\n--[[----- FIN CONFIGURACION AVANZADA -----------------------------------------]]\n\n--[[inTable(tbl, item)\n    (array) tbl:  tabla a comparar\n    (table) item: tabla con el item a buscar, deve conterner un elemente \"id\"\n  averiguar si un dispositivo forma parte de una tabla --]]\nfunction inTable(tbl, item)\n  if tbl ~= nil then\n    for key, value in pairs(tbl) do\n      if value.id == item.id then\n        return true\n      end\n    end\n  end\n  return false\nend\n\n--[[isVariable(varName)\n    (string) varName: nombre de la variable global\n  comprueba si existe una variable global dada(varName) --]]\nfunction isVariable(varName)\n  -- comprobar si existe\n  local valor, timestamp = fibaro:getGlobal(varName)\n  if (valor and timestamp > 0) then return valor end\n  return false\nend\n\n--[[getDevice(nodeId)\n    (number) nodeId: n√∫mero del dispositivo a recuperar de la variable global\n  recupera el dispositivo virtual desde la variable global --]]\nfunction getDevice(nodeId)\n  -- si  existe la variable global recuperar dispositivo\n  local device = isVariable('dev'..nodeId)\n  if device and device ~= 'NaN' and device ~= 0 and device ~= '' then\n    return json.decode(device)\n  end\n  -- en cualquier otro caso error\n  return false\nend\n\n-- recuperar dispositivo\nlocal ahorroEnergia = getDevice(_selfId)\nlocal staleTimeoOut = ahorroEnergia.staleTimeoOut\n\n--[[ disminuir el tiempo\nif staleTimeoOut >= interval * 60 then\n  -- disminuir intervalo\n  staleTimeoOut = staleTimeoOut - interval * 60\nelse\n  -- situar el tiempo m√°ximo\n  staleTimeoOut = maxTime * 60 * 60\nend\n--]]\n\n-- aumentar el tiempo\nif staleTimeoOut  < maxTime * 60 * 60 then\n  -- aumentar el tiempo\n  staleTimeoOut = staleTimeoOut + interval * 60\nelse\n  -- situal ri tiempo m√≠nimo\n  staleTimeoOut = 0\nend\n\n-- guardar la tabla en la variable global\nahorroEnergia.staleTimeoOut = staleTimeoOut\nfibaro:setGlobal('dev'.._selfId, json.encode(ahorroEnergia))\n\nlocal formatTime = os.date(\"*t\", os.time())\nformatTime.hour = 0; formatTime.sec = 0; formatTime.min = 0\nformatTime = os.time(formatTime)\nformatTime = formatTime + staleTimeoOut\nfibaro:debug(formatTime)\nformatTime = os.date('%H:%M', formatTime)\n-- actualizar etiqueta de propiedades\nfibaro:call(_selfId, \"setProperty\", \"ui.staleTimeoOutButton.value\", formatTime)\n","buttonIcon":0,"favourite":false,"main":false}]},{"type":"label","elements":[{"id":17,"lua":false,"waitForResponse":false,"caption":"","name":"idLabel","favourite":false,"main":false}]}]},"actions":{"pressButton":1,"setSlider":2,"setProperty":2}}